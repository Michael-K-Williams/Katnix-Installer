#!/usr/bin/env bash

# Katnix Installer - Simple NixOS Configuration Installer
set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuration
KATNIX_CONFIG_REPO="https://github.com/Michael-K-Williams/KatnixConfig.git"
CONFIG_DIR="$HOME/nixos"
HOSTNAME=""
MACHINE_TYPE=""
GRAPHICS_TYPE=""
USERNAME=$(whoami)

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}    Katnix NixOS Installer      ${NC}"
    echo -e "${BLUE}================================${NC}"
    echo ""
}

print_success() { echo -e "${GREEN}✅ $1${NC}"; }
print_error() { echo -e "${RED}❌ $1${NC}"; }
print_warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
print_info() { echo -e "${BLUE}ℹ️  $1${NC}"; }

# Check prerequisites
check_prerequisites() {
    print_info "Checking prerequisites..."
    
    if [[ $EUID -eq 0 ]]; then
        print_error "Don't run as root! Run as regular user."
        exit 1
    fi
    
    if [[ ! -f /etc/NIXOS ]] || [[ ! -f /etc/nixos/hardware-configuration.nix ]]; then
        print_error "This doesn't appear to be a NixOS system or hardware-configuration.nix is missing!"
        exit 1
    fi
    
    print_success "Prerequisites check passed"
}

# Get configuration from user
get_user_config() {
    echo "Hostname Configuration"
    echo "Enter the hostname for this machine:"
    read -p "Hostname: " HOSTNAME
    
    if [[ -z "$HOSTNAME" ]]; then
        print_error "Hostname cannot be empty"
        exit 1
    fi
    
    echo ""
    echo "ℹ️  Hostname will be: $HOSTNAME"
    read -p "Is this correct? (y/n): " confirm
    if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
        print_error "Installation cancelled"
        exit 1
    fi
    print_success "Hostname configured: $HOSTNAME"
    
    echo ""
    echo "Machine Type Configuration"
    echo "Select your machine type:"
    echo "1) Desktop - Gaming setup with Steam, Elite Dangerous tools"
    echo "2) Laptop  - Power-efficient setup, no gaming tools"
    echo ""
    read -p "Enter choice (1 or 2): " choice
    
    case $choice in
        1) MACHINE_TYPE="desktop" ;;
        2) MACHINE_TYPE="laptop" ;;
        *) print_error "Invalid choice"; exit 1 ;;
    esac
    print_success "Machine type: $MACHINE_TYPE"
    
    echo ""
    echo "Graphics Configuration"
    echo "Select your graphics hardware:"
    echo "1) Intel Graphics"
    echo "2) NVIDIA Graphics"
    echo ""
    read -p "Enter choice (1 or 2): " choice
    
    case $choice in
        1) GRAPHICS_TYPE="intel" ;;
        2) GRAPHICS_TYPE="nvidia" ;;
        *) print_error "Invalid choice"; exit 1 ;;
    esac
    print_success "Graphics: $GRAPHICS_TYPE"
}

# Clone and setup configuration
setup_configuration() {
    print_info "Setting up configuration in $CONFIG_DIR..."
    
    if [[ -d "$CONFIG_DIR" ]]; then
        print_warning "Configuration directory exists. Backing up..."
        mv "$CONFIG_DIR" "${CONFIG_DIR}.backup.$(date +%s)"
    fi
    
    print_info "Cloning Katnix configuration..."
    git clone "$KATNIX_CONFIG_REPO" "$CONFIG_DIR"
    
    cd "$CONFIG_DIR"
    
    print_success "Configuration cloned successfully"
}

# Create machine-specific configuration
create_machine_config() {
    print_info "Creating machine-specific configuration..."
    
    # Set hardware imports
    local hardware_import=""
    if [[ "$GRAPHICS_TYPE" == "intel" ]]; then
        hardware_import="../intel-graphics.nix"
    elif [[ "$GRAPHICS_TYPE" == "nvidia" ]]; then
        hardware_import="../nvidia.nix"  
    fi
    
    # Create the machine config
    cat > "$CONFIG_DIR/machines/machine.nix" << EOF
{
  # This file is auto-generated by the Katnix installer
  # Machine: $HOSTNAME
  # Type: $MACHINE_TYPE
  # Graphics: $GRAPHICS_TYPE
  # Generated: $(date)
  
  hostName = "$HOSTNAME";
  userName = "$USERNAME";
  userDescription = "Katnix User";
  backgroundImagePath = ../kat.png;
  
  # Hardware imports based on graphics type
  hardwareImports = [
    $hardware_import
  ];
  
  # Machine type configuration (read from persistent config)
  machineType = "$MACHINE_TYPE";
  includeEliteDangerous = $(if [[ "$MACHINE_TYPE" == "desktop" ]]; then echo "true"; else echo "false"; fi);
}
EOF

    print_success "Created machine configuration"
}

# Update flake.nix to use the single machine config
update_flake() {
    print_info "Updating flake configuration..."
    
    # Replace the nixosConfigurations section to use our single machine config
    cat > temp_flake.nix << 'EOF'
{
  description = "NixOS configuration with home-manager";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-25.05";
    home-manager = {
      url = "github:nix-community/home-manager/release-25.05";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    plasma-manager = {
      url = "github:nix-community/plasma-manager";
      inputs.nixpkgs.follows = "nixpkgs";
      inputs.home-manager.follows = "home-manager";
    };
    nix-flatpak = {
      url = "github:gmodena/nix-flatpak";
    };
    edhm = {
      url = "github:Brighter-Applications/EDHM-Nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    edmc = {
      url = "github:Brighter-Applications/EDMC-Nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    vscode-mutable = {
      url = "github:Michael-K-Williams/VSCode-mutable/main";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    zsh-p10k-config = {
      url = "github:Michael-K-Williams/My-ZshP10k-Nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    claude-code = {
      url = "github:Michael-K-Williams/Claude-Code-Nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    katnix-commands = {
      url = "github:Michael-K-Williams/Katnix-Commands";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { self, nixpkgs, home-manager, plasma-manager, nix-flatpak, edhm, edmc, vscode-mutable, zsh-p10k-config, claude-code, katnix-commands, ... }@inputs: 
  let
    machineConfig = import ./machines/machine.nix;
    mkSystem = nixpkgs.lib.nixosSystem {
      system = "x86_64-linux";
      specialArgs = { inherit inputs machineConfig; };
      modules = [
        ./configuration.nix
        home-manager.nixosModules.home-manager
        edhm.nixosModules.default
        edmc.nixosModules.default
        vscode-mutable.nixosModules.default
        {
          home-manager.useGlobalPkgs = true;
          home-manager.useUserPackages = true;
          home-manager.backupFileExtension = "backup";
          home-manager.extraSpecialArgs = { inherit inputs machineConfig; };
          home-manager.users.${machineConfig.userName} = import ./home.nix;
        }
      ];
    };
  in {
    nixosConfigurations = {
      default = mkSystem;
    };
  };
}
EOF
    
    mv temp_flake.nix flake.nix
    print_success "Updated flake configuration"
}

# Install the system
install_system() {
    print_info "Installing system configuration..."
    print_warning "This will require sudo access"
    
    print_info "Updating flake lock..."
    nix flake update
    
    print_info "Building configuration..."
    nix build ".#nixosConfigurations.default.config.system.build.toplevel" --impure
    
    print_info "Switching to new configuration..."
    sudo nixos-rebuild switch --flake ".#default" --impure
    
    print_success "System configuration installed successfully!"
}

# Main installation process
main() {
    print_header
    check_prerequisites
    echo ""
    get_user_config
    echo ""
    
    echo "Configuration Summary:"
    echo "  Hostname: $HOSTNAME"
    echo "  Machine Type: $MACHINE_TYPE"
    echo "  Graphics: $GRAPHICS_TYPE"
    echo "  Configuration Directory: $CONFIG_DIR"
    echo ""
    read -p "Proceed with installation? (y/n): " confirm
    if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
        print_error "Installation cancelled"
        exit 1
    fi
    
    setup_configuration
    create_machine_config
    update_flake
    install_system
    
    echo ""
    print_success "Katnix installation completed!"
    print_info "Your system hostname is: $HOSTNAME"
    print_info "Machine type: $MACHINE_TYPE with $GRAPHICS_TYPE graphics"
    print_info "Configuration is available at: $CONFIG_DIR"
    echo ""
    print_info "Future updates can be done with:"
    echo "  katnix update"
    echo "  # or manually: cd ~/nixos && sudo nixos-rebuild switch --flake .#default --impure"
    echo ""
    print_warning "You may need to reboot to ensure all changes take effect."
}

main "$@"
